[
	{
		name: 'hello'
		instruction: '''
		Найди и исправь все стилевые ошибки в коде. Кликай мышкой по ошибкам.
		Каждая найденная ошибка: +1 балл.
		'''
		learning: true
		code:'''
		void Main()
		{
			Console.WriteLine("Enter your name: ");
			var {{veryBadVariableName_clickIt}} = Console.ReadLine();
			Console.WriteLine("Hello, " + {{veryBadVariableName_clickIt}});
		}
		'''
		bugs:
			veryBadVariableName_clickIt:
				type: 'naming'
				replace: 'name'
				description: "Длинное и ужасное имя переменной!"
	},
	{
		name: 'GetThem'
		instruction: 'Качественно выбранные имена — то что делает ваш код понятнее!'
		learning: true
		code:'''
		List<Position> {{GetThem}}(List<Cell> {{theBigList}})
		{
			var {{list1}} = new List<Position>();
			foreach (var cell in {{theBigList}})
			{
				if (cell.IsEmpty) 
					{{list1}}.Add(cell.Position);
			}
			return {{list1}};
		}
		'''
		bugs:
			GetThem:
				type: 'naming'
				replace: 'GetEmptyPositions'
				description: "Не используйте местоимения в именах. Это совсем не добавляет понятности."
			list1:
				type: 'naming'
				replace: 'emptyPositions'
				description: 'Имя должно отражать семантику, а не тип переменной. Имена вида s, list, array не дают полезной информации читателю.'
			theBigList:
				type: 'naming'
				replace: 'allCells'
				description: "Имя должно отражать семантику, а не тип переменной. Имена вида s, list, array не дают полезной информации читателю."
	},
	{
		name: 'ViewsPerSecond'
		instruction: 'А что ещё, кроме качественных имен может сделать код понятнее?'
		learning: true
		code:'''
		double GetViewsPerSecond(IEnumerable<PageView> views, DateTime {{t}})
		{
			var {{n}} = {{86400}};
			var viewsCount = views.Count(v => v.Timestamp.Date == {{t}});
			return (double)viewsCount / {{n}};
		}
		'''
		bugs:
			t:
				type: 'naming'
				replace: 'date'
				description: '''
				В именах стоит отражать существенные особенности. 
				Например, если переменная типа DateTime хранит только дату, можно назвать ее date.
				'''
			n:
				type: 'naming'
				replace: 'secondsInDay'
				description: '''
				Имя переменной должно отражать семантику. 
				Старайтесь избегать однобуквенных имен. Общее правило: чем больше область видимости — тем подробнее должно быть имя.
				'''
			'86400':
				type: 'other'
				replace: '24 * 60 * 60'
				description: '''
				Иногда, арифметические выражения понятнее, чем значение этого выражения.
				Запись 24 * 60 * 60 проще проверить на корректность, чем 86400.
				'''
	},
	{
		name: 'rstr'
		instruction: 'Осторожнее — начиная с этого уровня, за каждый неверный клик и каждую подсказку вы будете терять один балл!'
		code: '''
		var {{rstr}} = Console.ReadLine();
		var {{flag}} = false;
		for(var charIndex = 0; charIndex < {{rstr}}.Length; charIndex++)
		{
			if ({{flag}} || {{rstr}}[charIndex] != '\\\\')
				Console.Write({{rstr}}[charIndex]);
			{{flag}} = {{rstr}}[charIndex] == '\\\\';
		}
		'''
		bugs: 
			rstr:
				replace: 'line'
				type: 'naming'
				description: '''
				Избегайте труднпрзнсимых имен и кодирования, понятного лишь вам.
				'''
			
			flag:
				replace: 'escaped'
				type: 'naming'
				description: '''
				Не называйте булевы переменные flag, f и подобными именами.
				У каждого "флага" есть смысл, который и нужно отразить в имени.
				'''
	},
	{
		name: 'bigrams'
		instruction: 'Придерживайтесь общепринятого стиля именования для текущего языка программирования.'
		code: '''
		List<string> GetBigrams(IList<string> words)
		{
			var {{colBigrams}} = words.Count - 1;
			var {{bigrams_list}} = new string[{{colBigrams}}];
			for (var {{I}} = 0; {{I}} < {{colBigrams}}; {{I}}++)
				{{bigrams_list}}[{{I}}] = words[{{I}}] + " " + words[{{I}} + 1];
			return {{bigrams_list}}.Distinct().ToList();
		}
		'''
		bugs:
			I:
				replace: 'i'
				type: 'naming'
				description: '''
				В C# имена локальных переменных принято начинать с маленькой буквы.
				Нарушение таких, казалось бы, несущественных правил часто сильно раздражает опытных программистов.
				'''		
			colBigrams:
				replace: 'bigramsCount'
				type: 'naming'
				description: '''
				Не используйте русские слова в именах (если только вы не программируете на 1C).
				Читая код, программисты ожидают видеть английские имена, 
				поэтому написанные транслитом русские слова могут быть восприняты неправильно.
				Например, в данном случае col (количество) легко спутать с сокращением от слова column.
				'''
			bigrams_list:
				type: 'naming'
				replace: 'bigrams'
				description: '''
				В C# для составных имен принято использовать стиль CamelCase, и не использовать snake_case.
				'''
	},
	{
		name: 'arg'
		instruction: 'В имени нужно отражать полезный для понимания смысл и стараться избегать слов заместителей с неопределенным смыслом.'
		code: '''
		static void Main(string[] args)
		{
			var {{arg}} = args.Length > 0 ? args[0] : defaultFilename;
			DateTime lastWriteTime = new FileInfo({{arg}}).LastWriteTime;
			bool {{check}} = lastWriteTime > DateTime.Now - TimeSpan.FromSeconds(1);
			{{Handle}}({{arg}}, {{check}});
			Console.WriteLine(lastWriteTime);
		}
		'''
		bugs:
			arg:
				replace: 'inputFile'
				type: 'naming'
				description: '''
				Отражайте в имени то, что важно при дальнейшем использовании.
				В данном случае то, что это имя входного файла важнее того, что оно получено из аргументов командной строки.
				'''
			check:
				replace: 'recentlyModified'
				type: 'naming'
				description: "Имя 'check' почти всегда можно улучшить. Сообщите в имени, что именно проверяется."
			Handle:
				type: 'methods'
				replace: 'ConvertFileToJson'
				description: '''
				Handle — слово заместитель, не добавляющее смысла. В чем именно заключается "обработка"? Отразите это в имени вместо слова Handle.
				'''
	},
	{
		name: 'manager'
		instruction: 'Продолжаем охоту на слова без смысла.'
		code: '''
		public interface {{IPriceManager}}
		{
			Json JsonFromXml(XmlDocument prices);
			XmlDocument XmlFromJson(Json prices);
		}
		'''
		bugs:
			IPriceManager:
				type: 'naming'
				replace: 'IPriceFormatConverter'
				description: '''
				Manager — слово заместитель, не добавляющее смысла. Часто его можно заменить на что-то более осмысленное.
				Например, менеджер по продажам может стать продавцом консультантом.
				'''
	},
	{
		name: 'CopyChars'
		instruction: 'Проблемы с именами в этом коде очевидны. Но тут есть кое-что еще!'
		code: '''
		void CopyChars(char[] {{array1}}, char[] {{array2}})
		{
			{{//copy arrays item by item.
			}}for(var i = 0; i < {{array1}}.Length; i++)
				{{array2}}[i] = {{array1}}[i];
		}
		'''
		bugs:
			array1:
				replace: 'source'
				type: 'naming'
				description: '''
				Имена с номерами на конце — это антипаттерн.
				Вместо добавления номеров старайтесь отразить в именах суть различия.
				'''
			array2:
				replace: 'destination'
				type: 'naming'
				description: "Функцию с непонятными именами аргументов неудобно использовать."
			'//copy':
				replace: ''
				type: 'comments'
				description: "Нет смысла писать комментарии, повторяющие код."
	},
	{
		name: 'English'
		instruction: 'В составных именах очень легко случайно продемонстрировать незнание английского :-)'
		code: '''
		private string {{directoryInput}};

		private string outputDirectory;

		public enum {{QualityRender}} 
		{
			High,
			Medium,
			Low
		}
		
		'''
		bugs:
			QualityRender:
				type: 'naming'
				replace: 'RenderQuality'
				description: '''
				Нарушение правильного порядка слов в составных именах — частая ошибка программистов 
				со слабым знанием английского.
				Качество рендера — это QualityOfRender или просто RenderQuality.
				'''
			directoryInput:
				type: 'naming'
				replace: 'inputDirectory'
				description: '''
				directoryInput с английского — это ввод директории. Входная директория — это inputDirectory.
				'''
	},
	{
		name: 'ShareIfYouLike'
		instruction: '''
		Автору будет приятно, если вы поделитесь ссылкой на эту игру с коллегами.
		Заранее спасибо! :-)
		'''
		code: '''
		if (you.Like(this.Game))
		{
			you.Tweet();
			you.Post();
			you.Share();
		}
		else
		{
			you.{{H4Te_AUth0R()}};
		}

		'''
		bugs:
			'H4Te_AUth0R()':
				type: 'naming'
				replace: 'EmailAuthor("pe@kontur.ru")'
				description: '''
				Ненависть — плохое чувство! :-)
				'''
	},
	{
		name: 'Chessboard'
		instruction: 'Время закрепить все полученные на предыдущих уровнях знания!'
		code:'''
		enum {{ColorCell}}
		{ 
			Black, 
			White
		}

		class Chessboard 
		{
			private {{ColorCell}}[,] {{array}};
			private int {{m_brdSz}};

			public Chessboard(int {{n}}) 
			{
				this.{{m_brdSz}} = {{n}};
				this.{{array}} = new {{ColorCell}}[{{m_brdSz}},{{m_brdSz}}];
				{{//Fill board with black and white colors}}
				for(var {{a}} = 0; {{a}} < {{m_brdSz}}; {{a}}++)
					for(var {{b}} = 0; {{b}} < {{m_brdSz}}; {{b}}++) 
					{
						bool isBlack = ({{a}} + {{b}}) % 2 == 0;
						{{array}}[{{a}}, {{b}}] = isBlack ? {{ColorCell}}.Black : {{ColorCell}}.White;
					}
			}
		}

		'''
		bugs:
			'//Fill':
				type: 'comments'
				replace: ''
				description: '''
				Комментарии повторяющие код не имеют смысла.
				'''
			ColorCell:
				type: 'naming'
				replace: 'CellColor'
				description: '''
				Нарушение правильного для английского языка порядка слов в составных именах — частая ошибка программистов 
				со слабым знанием английского.
				ColorCell — это цветная клетка, а цвет клетки — CellColor.
				Не путайте — не вводите в замешательство читающих.
				'''
			n:
				type: 'naming'
				replace: 'size'
				description: '''
				В данном контексте, n может обозначать как размер шахматной доски, так и количество фигур на доске или номер доски.
				Имя size устранит эту неоднозначность.
				'''
			m_brdSz:
				type: 'naming'
				replace: 'size'
				description: '''
				Не используйте закодированные или труднопроизносимые имена. Вам их придется произносить или хотя бы мысленно проговаривать!
				'''
			array:
				type: 'naming'
				replace: 'cellColors'
				description: '''
				Имя должно отражать семантику, а не тип переменной. Имена вида s, list, array не дают полезной информации читателю.
				'''
			a:
				type: 'naming'
				replace: 'y'
				description: '''
				Для обозначения координат вместо i, j и a, b лучше использовать предсказуемые и понятные x, y. 
				'''
			b:
				type: 'naming'
				replace: 'x'
				description: '''
				Избегайте необходимости мысленного декодирования при чтении кода.
				'''
	},
	{
		name: 'Initialization'
		instruction: 'Переменные и классы — это сущности, а методы — действия. Имейте это в виду!'
		code:'''
		public void {{Initialization}}(int boardSize)
		{
			Log("Board initialization...");
			this.piecesCount = 0;
			this.board = {{Board}}(boardSize, boardSize);
			Log("Board initialization finished");
		}
		'''
		bugs:
			Initialization:
				type: 'methods'
				replace: 'InitializeBoard'
				description: '''
				Методы — это действия, называйте их глаголами или глагольными фразами.
				'''
			Board:
				type: 'methods'
				replace: 'CreateBoard'
				description: '''
				Методы — это действия, называйте их глаголами или глагольными фразами.
				'''
	},
	{
		name:'GetSet'
		instruction: 'Имена должны выполнять обещания и не вводить читателя в замешательство.'
		code:'''
		void {{GetFactory}}()
		{
			var user = Environment.UserName;
			this.factory = {{FactoryCreator}}(user);
		}

		TimeSpan GetTimeout()
		{
			return this.timeout;
		}

		void {{SetTimeout}}()
		{
			var sectionName = systemName + "/timeout";
			this.timeout = ReadSettings(sectionName).Timeout;
		}
		'''
		bugs:
			GetFactory:
				type: 'methods'
				replace: 'InitFactory'
				description: '''
				Методы GetXXX, CreateXXX, ReadXXX должны возвращать результат.
				void-методы, инициализирующие поля класса лучше так не называть.
				'''
			FactoryCreator:
				type: 'methods'
				replace: 'CreateFactory'
				description: '''
				Методы — это действия, называйте их глаголами или глагольными фразами.
				'''
			SetTimeout:
				type: 'methods'
				replace: 'InitTimeoutFromSettings'
				description: '''
				Методы SetXXX должны принимать устанавливаемое значение в качестве аргумента. 
				Методы без аргументов лучше так не называть.
				'''
	},
	{
		name:'SplitMethod'
		instruction: 'Имена переменных и методов тут в порядке. Но не только это делает код хорошим!'
		code:'''
		void Main(string[] args)
		{
			string[] inputLines = File.ReadAllLines(args[0]);
			string outputPath = args[1];
			if (Directory.Exists(outputPath))
				outputPath = Path.Combine(outputPath, Path.GetFileName(args[0]));
			{{
			//Convert file}}
			var escapedLines = inputLines.Select(s => s.Replace(@"\", @"\\"));
			var outputText = string.Join("\\n", escapedLines);
			File.WriteAllText(outputPath, outputText);
			Console.WriteLine("{0} characters", outputText.Length);
		}
		'''
		bugs:
			'//Convert':
				type: 'methods'
				replace: '''
				ConvertFile(inputLines, outputPath);
				}

				void ConvertFile(IEnumerable<string> inputLines, string outputPath)
				{
				'''
				description: '''
				Вместо комментария, разделяющего код на две фазы, стоит сделать настоящее разделение кода на методы.
				Каждый метод должен делать ровно одну вещь. Если вы можете естественным образом разбить один метод на два — сделайте это!

				'''
		
	},
	{
		name:'CommentExplainCode'
		instruction: 'Крохотные методы в одну-две строки часто могут значительно повысить читаемость кода.'
		code:'''
		{{//If employee deserves full benefits}}
		if ({{employee.IsHourly() && employee.Age > 65 || employee.HasSpecialReward}}))
			Pay(employee, fullBenefitsAmount); {{//Pay largeAmount}}
		else
			Pay(employee, reducedAmount);
		'''
		bugs:
			'//Pay':
				type: 'comments'
				replace: ''
				description: '''
				Комментарии повторяющие код не нужны. Они легко могут устареть!
				'''
			'employee.IsHourly()':
				type: 'methods'
				replace: '''
				employee.DeservesFullBenefits()
				'''
				description: '''
				Сложные булевы выражения стоит выделять в методы или вспомогательные переменные, давая им говорящие названия. Это улучшит читаемость.
				'''
			'//If':
				type: 'comments'
				replace: ''
				description: '''
				Вместо поясняющего комментария лучше изменить код так, чтобы в комментарии не было нужды.
				'''
	},
	{
		name:'endComments'
		instruction: 'Как вы уже поняли, далеко не все комментарии полезны!'
		code:'''
		void Main(string[] args)
		{
			try
			{
				var linesCount = 0;
				var charsCount = 0;
				var lines = File.ReadAllLines(args[0]);
				foreach(var line in lines)
				{
					linesCount++;
					charsCount += line.Length;
				} {{//foreach}}
				Console.WriteLine("linesCount = " + linesCount);
				Console.WriteLine("charsCount = " + charsCount);
			} {{//try}}
			catch (Exception e)
			{
				Console.WriteLine("Error: " + e.Message);
			} {{//catch}}
		}
		'''
		bugs:
			'//foreach':
				type: 'comments'
				replace: ''
				description: '''
				Комментарии вида 'конец цикла', 'конец функции' и подобные бессмысленны. 
				'''
			'//try':
				type: 'comments'
				replace: ''
				description: '''
				Для коротких функций такие комментарии не нужны, а длинные функции лучше разбить на несколько более коротких.
				'''
			'//catch':
				type: 'comments'
				replace: ''
				description: '''
				Современные среды разработки и программистские редакторы умеют подсвечивать парные скобки. Это надежнее таких комментариев.
				'''
	},
	{
		name:'nameInsteadOfComment'
		instruction: 'Но не спешите удалять все комментарии из вашего кода. Бывают и полезные!'
		code:'''
		//format matched: hh:mm:ss, MMM dd, yyyy
		private Regex timeRegex = new Regex(@"\\d*:\\d*:\\d*, \\w* \\d*, \\d*");

		Responder {{GetResponder(); //Returns the Responder being tested.}}
		'''
		bugs:
			'GetResponder();':
				type: 'naming'
				replace: 'GetTestResponder();'
				description: '''
				Если появляется желание написать поясняющий комментарий к методу, стоит вместо этого постараться придумать более удачное имя методу.
				'''
	},
	{
		name:'ExplainCompare'
		instruction: 'Хорошие комментарии должны объяснять намерения программиста в тех случаях, когда их сложно выразить непосредственно кодом.'
		code:'''
		{{//comparison of this and other object}}
		public int CompareTo(object o)
		{
			var other = o as WikiPagePath;
			if(other != null)
			{
				{{//compares concatenated names of this and others}}
				string thisNames = string.Join("", this.Names);
				string otherNames = string.Join("", other.Names);
				return thisNames.CompareTo(otherNames);
			}
			return 1; // WikiPagePath should be greater than any other wrong type.
		} {{//end of CompareTo}}
		'''
		bugs:
			'//compares':
				type: 'comments'
				replace: ''
				description: '''
				Комментарии дословно повторяющие код бессмысленны.
				'''
			'//comparison':
				type: 'comments'
				replace: ''
				description: '''
				Бессмысленно писать в комментарии то, что итак понятно из названия метода.
				'''
			'//end':
				type: 'comments'
				replace: ''
				description: '''
				Комментарии вида 'конец цикла', 'конец функции' и подобные бессмысленны. 
				Для коротких функций они не нужны, а длинные функции лучше разбить на несколько более коротких, вместо написания таких комментариев.
				'''
	},
	{
		name:'XMLDoc'
		instruction: 'А что вы думаете о спец-комментариях — XML-документации и комментариях с историей изменений файла?'
		code:'''
		{{/*Changes (from 11-Oct-2011)
		* --------------------------
		* 12-Sep-2011 : Fix bug
		* 11-Oct-2011 : Move implementation to another file
		* 05-Nov-2011 : Add XML comments 
		*/
		}}namespace Logger
		{
			///<summary>Implement Logger to provide customized event filtering</summary>
			///<remarks>
			///<para>
			///Users should implement this interface to implement customized logging
			///event filtering. Note that <see cref="Logger.Repository.Hierarchy.Logger"/>
			///and <see cref="Logger.Appender.AppenderSkeleton"/>, the parent class of all
			///standard appenders, have built-in filtering rules. It is suggested that you
			///first use and understand the built-in rules before rushing to write
			///your own custom filters.
			///</para>
			///</remarks>
			public interface IFilter : IOptionHandler
			{
				{{///<summary>Make a decision about logging event.</summary>
				///<param name="loggingEvent">The LoggingEvent to decide upon</param>
				///<returns>The decision of the filter</returns>}}
				FilterDecision Decide(LoggingEvent loggingEvent);

				{{///<summary>Property to get and set the next filter</summary>
				///<value>The next filter in chain</value>
				}}IFilter NextInChain { get; set; }
			}
		}
		'''
		bugs:
			'///<summary>Make':
				type: 'comments'
				replace: ''
				description: '''
				XML-комментарии не несущие новой информации бесполезны.
				'''
			'///<summary>Property':
				type: 'comments'
				replace: ''
				description: '''
				Не пишите XML-комментарий только для того, чтобы он был. В наличии комментария должен быть какой-то смысл.
				'''
			'/*Changes':
				type: 'comments'
				replace: ''
				description: '''
				Когда-то очень давно был смысл писать комментарии с историей изменения файла.
				Но сейчас вместо таких комментариев лучше использовать систему контроля версий и писать понятные сообщения к коммитам.
				'''
	},
	{
		name:'collision'
		instruction: 'Время закрепить освоенные знания!'
		code:'''
		{{///<summary>Обрабатывает столкновение героя с врагом</summary>}}
		void {{CollisionHandler}}(GameObject hero, GameObject enemy)
		{
			{{//If hero and enemy collided
			if ((hero.X-enemy.X)*(hero.X-enemy.X) + (hero.Y-enemy.Y)*(hero.Y-enemy.Y) 
				< (hero.Radius + enemy.Radius)*(hero.Radius + enemy.Radius))}}
			{
				hero.Life--;
				if (!hero.IsAlive && OnHeroDeath != null) {{//нужно оповестить подписчиков}}
					OnHeroDeath(hero);
			}
		}
		'''
		bugs:
			'///<summary>Обрабатывает':
				type: 'comments'
				replace: ''
				description: '''
				XML-комментарии бессмысленны, если не несут новую информацию.
				'''
			CollisionHandler:
				type: 'methods'
				replace: 'HandleCollision'
				description: '''
				Методы — это действия, называйте их глаголами или глагольными фразами.
				'''
			'//If':
				type: 'comments'
				replace: 'if (Collided(hero, enemy))'
				description: '''
				Не используйте комментарии там, где можно выделить метод с говорящим именем.
				'''
			'//нужно':
				type: 'comments'
				replace: ''
				description: '''
				Комментарии дословно повторяющие код бессмысленны.
				'''
	},
	{
		name:'LoadMap'
		instruction: 'Последний уровень! По законам жанра тут должно быть много кода!'
		code:'''
		///<param name="path">
		/// Path to file or directory with map description. 
		/// If path is a path to directory, file default.map is used.
		///</param>
		GameMap LoadMap(string path)
		{
			var {{Filename}} = Directory.Exists(path) 
				? Path.Combine(path, "default.map") 
				: path;
			var lines = File.ReadAllLines({{Filename}});
			var height = lines.Length;
			var width = lines[0].Length;
			{{//Initialize map}}
			var map = new GameMap(width, height{{) 
						{
							Score = 0,
							HeroLifesCount = 3,
							Time = 0,
						}; }}
			for(var y=0; y<height; y++)
				for(var x=0; x<{{lines[0].Length}}; x++)
				{
					{{//============Select object to put in (x, y) cell;
					GameObject obj = null;
					switch (lines[y][x])
					{
						case 'H': 
							obj = new Hero();
							break;
						case '#':
							obj = new Wall();
							break;
						case 'M':
							obj = new Monster();
							break;
					}
					//============Put created object on map}}
					map.Put(x, y, obj);
				}
			return map;
		}
		'''
		bugs:
			Filename:
				type: 'naming'
				replace: 'filename'
				description: '''
				В C# локальные переменные принято называть с маленькой буквы.
				'''
			'lines[0].Length':
				type: 'other'
				replace: 'width'
				description: '''
				Устраняйте дублирование. Это делает код  понятнее и надежнее.
				'''
			'//Initialize':
				type: 'comments'
				replace: ''
				description: '''
				При виде комментария, разделяющего метод на смысловые части, стоит вынести эти смысловые части в отдельные методы.
				'''
			')':
				type: 'methods'
				replace: ');'
				description: '''
				Логику инициализации полей карты лучше переместить в конструктор класса карты.
				'''
			'//============Select':
				type: 'methods'
				replace: 'var obj = CreateGameObjectFromChar(lines[y][x]);'
				description: '''
				Разделительные комментарии вроде такого часто показывают, что программист поленился выделить вспомогательный метод.
				'''
	},
]
